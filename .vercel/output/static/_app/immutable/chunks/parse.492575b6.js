function y(s,I){return i(JSON.parse(s),I)}function i(s,I){if(typeof s=="number")return a(s,!0);if(!Array.isArray(s)||s.length===0)throw new Error("Invalid input");const u=s,e=Array(u.length);function a(r,N=!1){if(r===-1)return;if(r===-3)return NaN;if(r===-4)return 1/0;if(r===-5)return-1/0;if(r===-6)return-0;if(N)throw new Error("Invalid input");if(r in e)return e[r];const t=u[r];if(!t||typeof t!="object")e[r]=t;else if(Array.isArray(t))if(typeof t[0]=="string"){const c=t[0],o=I?.[c];if(o)return e[r]=o(a(t[1]));switch(c){case"Date":e[r]=new Date(t[1]);break;case"Set":const f=new Set;e[r]=f;for(let n=1;n<t.length;n+=1)f.add(a(t[n]));break;case"Map":const l=new Map;e[r]=l;for(let n=1;n<t.length;n+=2)l.set(a(t[n]),a(t[n+1]));break;case"RegExp":e[r]=new RegExp(t[1],t[2]);break;case"Object":e[r]=Object(t[1]);break;case"BigInt":e[r]=BigInt(t[1]);break;case"null":const E=Object.create(null);e[r]=E;for(let n=1;n<t.length;n+=2)E[t[n]]=a(t[n+1]);break;default:throw new Error(`Unknown type ${c}`)}}else{const c=new Array(t.length);e[r]=c;for(let o=0;o<t.length;o+=1){const f=t[o];f!==-2&&(c[o]=a(f))}}else{const c={};e[r]=c;for(const o in t){const f=t[o];c[o]=a(f)}}return e[r]}return a(0)}export{y as p,i as u};
